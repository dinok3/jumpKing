class Main{
    function void main(){
		//screen : 512 * 256
		var int k, c;
		var boolean active;
		//start position: 32(po 16 u stupcu) * 255(redova) + 15(0..31)
        do Main.draw(8175);
		
		// do Memory.poke(16384 + 8160, -1);
		// do Memory.poke(16384 + 7664, -1);
		// do Memory.poke(16384 + 7663, -1);
		let c = 0; // -32768 .. 32767
		let active = true;
		while(active){
			let k = Keyboard.keyPressed();
			while(k = 32){
				do Sys.wait(10);
				if(c < 100){
					let c = c + 1;
				}
				let k = Keyboard.keyPressed();
				//do Output.printInt(c);
				//do Output.printChar(" ");
			
			}
			//space je otpusten
			if(~(k = 0)){
				do Output.printInt(c);
				//let c = 0;
				let active = false;
			}
			
		}
		
		//do pola ekrana - skoci 7 puta 0..6 jer skace po 16 pixela
		
		/*  let k = 0;
		while(k < 8){
			do Main.jumpUp(8175 - (512 * k),0);
			do Sys.wait(10);
			let k = k + 1;
		} 
		 */

		
		
		/* let k = 0;
		while(k < 55){
			do Main.jumpUp2(8175 - (64 * k));
			do Sys.wait(k);
			let k = k + 1;
		} */
		
		//TODO: probaj sa drawAbove koji ide po jedan pixel - trebalo bi biti gore
		//do Main.jumpUp2(8175, c);
		do Main.jumpUp(8175, c);
		do Memory.poke(16384 + 8160, -1);
		do Memory.poke(16384 + 8160 + 31, -1);
		
		
        return;
    }


function void jumpUp(int location, int c){
	//2 pixela skok
	var int k;
	var int h_max, v0, t1, t2, D, c, last_time, wait_time;

	let c = Main.clamp(c);
	let last_time = 0;
	let v0 = (160 * c) / 100;
	let h_max = (v0 * v0) / (2 * 160); 
	let k = 0;
	do Main.draw(location);

	// do Main.draw(location - 5);
	// do Main.draw(location - 5 - (64*3));
	// do Main.draw(location - 5 - (64*12));
	// do Main.draw(location - 5 - (64*28));
	// do Main.draw(location - 5 - (64*51));
	// do Main.draw(location - 5 - (64*80));
	//12 fps
	while(k < h_max){
		let c = -(k+1);
		let D = Math.sqrt(v0*v0 - (4*(-80)*c));
		let t1 = (-v0 + D) * 100 / (2 * (-80)); let t2 = (-v0 - D) * 100 / (2 * (-80)); 
		let wait_time = t1 * 10 - last_time;

		do Sys.wait(wait_time);
		let last_time = t1 * 10;
		do Main.drawAbove(location - (64*k));
		let k = k + 1; 
	}   

	do Output.printChar(" ");
	do Output.printInt(h_max);
	do Output.printChar(" ");
	do Output.printInt(k);
	let last_time = v0 * 100 / 160 * 10;
	while(k > 0){
		let c = -k + 1;
		let D = Math.sqrt(v0*v0 - (4*(-80)*c));
		let t1 = (-v0 + D) * 100 / (2 * (-80)); let t2 = (-v0 - D) * 100 / (2 * (-80)); 
		let wait_time = last_time - (t1 * 10);

		do Sys.wait(wait_time);
		let last_time = last_time - wait_time;
		do Main.drawBelow(location - (64*k));
		let k = k - 1; 
	} 
	
    return; 
} 
   
function int clamp(int percent){
	if(percent < 20)  { return 0;   } 
	if(percent < 40)  { return 20;  } 
	if(percent < 60)  { return 40;  } 
	if(percent < 80)  { return 60;  } 
	if(percent < 100) { return 80;  } 
	else			  { return 100; } 
	
}

function void jumpUp2(int location, int c){
	//2 pixela skok
	var int k;
	var int h_max, v0, t1, t2, D, c, last_time, wait_time;

	let c = Main.clamp(c);
	let last_time = 0;
	let v0 = (80 * c) / 100;
	let h_max = (v0 * v0) / (2 * 40); 
	let k = 0;
	do Main.draw(location);
	do Output.printChar(" ");
	do Output.printInt(h_max);
	do Output.printChar(" ");
	do Output.printInt(v0);

	do Main.draw(location - 5);
	do Main.draw(location - 5 - (64*3));
	do Main.draw(location - 7 - (64*12));
	do Main.draw(location - 5 - (64*28));
	do Main.draw(location - 5 - (64*51));
	do Main.draw(location - 5 - (64*80));

	//12 fps
	while(k < h_max){
		let c = -(k+1);
		do Output.printChar(" ");
		let D = Math.sqrt(v0*v0 - (4*(-20)*c));
		let t1 = (-v0 + D) * 100 / (2 * (-20)); let t2 = (-v0 - D) * 100 / (2 * (-20)); 
		let wait_time = t1 * 10 - last_time;

		do Output.printChar(" ");
		do Output.printInt(wait_time);
		do Output.printChar(" ");
		do Output.printInt(t1 * 10);
		do Output.printChar(" "); 
		
		do Sys.wait(wait_time);
		let last_time = t1 * 10;
		do Main.drawAbove(location - (64*k));
		let k = k + 1; 
	}   

	do Output.printChar(" ");
	do Output.printInt(h_max);
	do Output.printChar(" ");
	do Output.printInt(k);
	let last_time = 2000;
	while(k > 0){
		do Output.printChar(" ");

		let c = -k + 1;
		do Output.printChar(" ");
		let D = Math.sqrt(v0*v0 - (4*(-20)*c));
		let t1 = (-v0 + D) * 100 / (2 * (-20)); let t2 = (-v0 - D) * 100 / (2 * (-20)); 
		let wait_time = last_time - (t1 * 10);

		do Output.printChar(" ");
		do Output.printInt(wait_time);
		do Output.printChar(" ");
		do Output.printInt(t1 * 10);
		do Output.printChar(" ");
		
		do Sys.wait(wait_time);
		let last_time = last_time - wait_time;
		do Main.drawBelow(location - (64*k));
		let k = k - 1; 
	} 
	
    return; 
} 

function void draw(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress -928, -2048);
	do Memory.poke(memAddress -896, -1024);
	do Memory.poke(memAddress -864, 7168);
	do Memory.poke(memAddress -832, 7168);
	do Memory.poke(memAddress -800, 7168);
	do Memory.poke(memAddress -768, -9216);
	do Memory.poke(memAddress -736, -25600);
	do Memory.poke(memAddress -704, 7168);
	do Memory.poke(memAddress -672, 7168);
	do Memory.poke(memAddress -640, 7168);
	do Memory.poke(memAddress -608, 8128);
	do Memory.poke(memAddress -576, 15868);
	do Memory.poke(memAddress -544, -1538);
	do Memory.poke(memAddress -512, -6145);
	do Memory.poke(memAddress -480, 2047);
	do Memory.poke(memAddress -448, -6145);
	do Memory.poke(memAddress -416, -6145);
	do Memory.poke(memAddress -384, -7170);
	do Memory.poke(memAddress -352, -16144);
	do Memory.poke(memAddress -320, -24608);
	do Memory.poke(memAddress -288, 16368);
	do Memory.poke(memAddress -256, 32752);
	do Memory.poke(memAddress -224, 32752);
	do Memory.poke(memAddress -192, 32736);
	do Memory.poke(memAddress -160, 32752);
	do Memory.poke(memAddress -128, 16368);
	do Memory.poke(memAddress -96, 8184);
	do Memory.poke(memAddress -64, 16376);
	do Memory.poke(memAddress -32, 32760);
	do Memory.poke(memAddress, 32752);
	// column 1
	do Memory.poke(memAddress -927, 31);
	do Memory.poke(memAddress -895, 63);
	do Memory.poke(memAddress -863, 48);
	do Memory.poke(memAddress -831, 48);
	do Memory.poke(memAddress -799, 48);
	do Memory.poke(memAddress -767, 55);
	do Memory.poke(memAddress -735, 55);
	do Memory.poke(memAddress -703, 50);
	do Memory.poke(memAddress -671, 50);
	do Memory.poke(memAddress -639, 50);
	do Memory.poke(memAddress -607, 1008);
	do Memory.poke(memAddress -575, 8176);
	do Memory.poke(memAddress -543, 8159);
	do Memory.poke(memAddress -511, 8143);
	do Memory.poke(memAddress -479, 8128);
	do Memory.poke(memAddress -447, 8135);
	do Memory.poke(memAddress -415, 8071);
	do Memory.poke(memAddress -383, 391);
	do Memory.poke(memAddress -351, 507);
	do Memory.poke(memAddress -319, 1021);
	do Memory.poke(memAddress -287, 2046);
	do Memory.poke(memAddress -255, 4094);
	do Memory.poke(memAddress -223, 4094);
	do Memory.poke(memAddress -191, 4092);
	do Memory.poke(memAddress -159, 4094);
	do Memory.poke(memAddress -127, 2046);
	do Memory.poke(memAddress -95, 1023);
	do Memory.poke(memAddress -63, 2047);
	do Memory.poke(memAddress -31, 4095);
	do Memory.poke(memAddress +1, 4094);
	return;
}

function void drawAbove(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress -992, -2048);
	do Memory.poke(memAddress -960, -1024);
	do Memory.poke(memAddress -928, 7168);
	do Memory.poke(memAddress -896, 7168);
	do Memory.poke(memAddress -864, 7168);
	do Memory.poke(memAddress -832, -9216);
	do Memory.poke(memAddress -800, -25600);
	do Memory.poke(memAddress -768, 7168);
	do Memory.poke(memAddress -736, 7168);
	do Memory.poke(memAddress -704, 7168);
	do Memory.poke(memAddress -672, 8128);
	do Memory.poke(memAddress -640, 7676);
	do Memory.poke(memAddress -608, -1538);
	do Memory.poke(memAddress -576, -6145);
	do Memory.poke(memAddress -544, 2047);
	do Memory.poke(memAddress -512, -6145);
	do Memory.poke(memAddress -480, -6145);
	do Memory.poke(memAddress -448, -7170);
	do Memory.poke(memAddress -416, -16144);
	do Memory.poke(memAddress -384, -24608);
	do Memory.poke(memAddress -352, 16368);
	do Memory.poke(memAddress -320, 32752);
	do Memory.poke(memAddress -288, 32752);
	do Memory.poke(memAddress -256, 32736);
	do Memory.poke(memAddress -224, 32752);
	do Memory.poke(memAddress -192, 16368);
	do Memory.poke(memAddress -160, 8184);
	do Memory.poke(memAddress -128, 16376);
	do Memory.poke(memAddress -96, 32760);
	do Memory.poke(memAddress -64, 32752);
	do Memory.poke(memAddress -32, 0);
	do Memory.poke(memAddress, 0);
	// column 1
	do Memory.poke(memAddress -991, 31);
	do Memory.poke(memAddress -959, 63);
	do Memory.poke(memAddress -927, 48);
	do Memory.poke(memAddress -895, 48);
	do Memory.poke(memAddress -863, 48);
	do Memory.poke(memAddress -831, 55);
	do Memory.poke(memAddress -799, 55);
	do Memory.poke(memAddress -767, 50);
	do Memory.poke(memAddress -735, 50);
	do Memory.poke(memAddress -703, 50);
	do Memory.poke(memAddress -671, 1008);
	do Memory.poke(memAddress -639, 8176);
	do Memory.poke(memAddress -607, 8159);
	do Memory.poke(memAddress -575, 8143);
	do Memory.poke(memAddress -543, 8128);
	do Memory.poke(memAddress -511, 8135);
	do Memory.poke(memAddress -479, 8071);
	do Memory.poke(memAddress -447, 391);
	do Memory.poke(memAddress -415, 507);
	do Memory.poke(memAddress -383, 1021);
	do Memory.poke(memAddress -351, 2046);
	do Memory.poke(memAddress -319, 4094);
	do Memory.poke(memAddress -287, 4094);
	do Memory.poke(memAddress -255, 4092);
	do Memory.poke(memAddress -223, 4094);
	do Memory.poke(memAddress -191, 2046);
	do Memory.poke(memAddress -159, 1023);
	do Memory.poke(memAddress -127, 2047);
	do Memory.poke(memAddress -95, 4095);
	do Memory.poke(memAddress -63, 4094);
	do Memory.poke(memAddress -31, 0);
	do Memory.poke(memAddress +1, 0);
	return;
}
function void drawAbove2(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress -960, -2048);
	do Memory.poke(memAddress -928, -1024);
	do Memory.poke(memAddress -896, 7168);
	do Memory.poke(memAddress -864, 7168);
	do Memory.poke(memAddress -832, 7168);
	do Memory.poke(memAddress -800, -9216);
	do Memory.poke(memAddress -768, -25600);
	do Memory.poke(memAddress -736, 7168);
	do Memory.poke(memAddress -704, 7168);
	do Memory.poke(memAddress -672, 7168);
	do Memory.poke(memAddress -640, 8128);
	do Memory.poke(memAddress -608, 7676);
	do Memory.poke(memAddress -576, -1538);
	do Memory.poke(memAddress -544, -6145);
	do Memory.poke(memAddress -512, 2047);
	do Memory.poke(memAddress -480, -6145);
	do Memory.poke(memAddress -448, -6145);
	do Memory.poke(memAddress -416, -7170);
	do Memory.poke(memAddress -384, -16144);
	do Memory.poke(memAddress -352, -24608);
	do Memory.poke(memAddress -320, 16368);
	do Memory.poke(memAddress -288, 32752);
	do Memory.poke(memAddress -256, 32752);
	do Memory.poke(memAddress -224, 32736);
	do Memory.poke(memAddress -192, 32752);
	do Memory.poke(memAddress -160, 16368);
	do Memory.poke(memAddress -128, 8184);
	do Memory.poke(memAddress -96, 16376);
	do Memory.poke(memAddress -64, 32760);
	do Memory.poke(memAddress -32, 32752);
	do Memory.poke(memAddress, 0);
	// column 1
	do Memory.poke(memAddress -959, 31);
	do Memory.poke(memAddress -927, 63);
	do Memory.poke(memAddress -895, 48);
	do Memory.poke(memAddress -863, 48);
	do Memory.poke(memAddress -831, 48);
	do Memory.poke(memAddress -799, 55);
	do Memory.poke(memAddress -767, 55);
	do Memory.poke(memAddress -735, 50);
	do Memory.poke(memAddress -703, 50);
	do Memory.poke(memAddress -671, 50);
	do Memory.poke(memAddress -639, 1008);
	do Memory.poke(memAddress -607, 8176);
	do Memory.poke(memAddress -575, 8159);
	do Memory.poke(memAddress -543, 8143);
	do Memory.poke(memAddress -511, 8128);
	do Memory.poke(memAddress -479, 8135);
	do Memory.poke(memAddress -447, 8071);
	do Memory.poke(memAddress -415, 391);
	do Memory.poke(memAddress -383, 507);
	do Memory.poke(memAddress -351, 1021);
	do Memory.poke(memAddress -319, 2046);
	do Memory.poke(memAddress -287, 4094);
	do Memory.poke(memAddress -255, 4094);
	do Memory.poke(memAddress -223, 4092);
	do Memory.poke(memAddress -191, 4094);
	do Memory.poke(memAddress -159, 2046);
	do Memory.poke(memAddress -127, 1023);
	do Memory.poke(memAddress -95, 2047);
	do Memory.poke(memAddress -63, 4095);
	do Memory.poke(memAddress -31, 4094);
	do Memory.poke(memAddress +1, 0);
	return;
}

function void drawBelow(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress -864, -2048);
	do Memory.poke(memAddress -928, 0);
	do Memory.poke(memAddress -896, 0);
	do Memory.poke(memAddress -832, -1024);
	do Memory.poke(memAddress -800, 7168);
	do Memory.poke(memAddress -768, 7168);
	do Memory.poke(memAddress -736, 7168);
	do Memory.poke(memAddress -704, -9216);
	do Memory.poke(memAddress -672, -25600);
	do Memory.poke(memAddress -640, 7168);
	do Memory.poke(memAddress -608, 7168);
	do Memory.poke(memAddress -576, 7168);
	do Memory.poke(memAddress -544, 8128);
	do Memory.poke(memAddress -512, 15868);
	do Memory.poke(memAddress -480, -1538);
	do Memory.poke(memAddress -448, -6145);
	do Memory.poke(memAddress -416, 2047);
	do Memory.poke(memAddress -384, -6145);
	do Memory.poke(memAddress -352, -6145);
	do Memory.poke(memAddress -320, -7170);
	do Memory.poke(memAddress -288, -16144);
	do Memory.poke(memAddress -256, -24608);
	do Memory.poke(memAddress -224, 16368);
	do Memory.poke(memAddress -192, 32752);
	do Memory.poke(memAddress -160, 32752);
	do Memory.poke(memAddress -128, 32736);
	do Memory.poke(memAddress -96, 32752);
	do Memory.poke(memAddress -64, 16368);
	do Memory.poke(memAddress -32, 8184);
	do Memory.poke(memAddress, 16376);
	do Memory.poke(memAddress +32, 32760);
	do Memory.poke(memAddress +64, 32752);
	// column 1
	do Memory.poke(memAddress -863, 31);
	do Memory.poke(memAddress -927, 0);
	do Memory.poke(memAddress -895, 0);
	do Memory.poke(memAddress -831, 63);
	do Memory.poke(memAddress -799, 48);
	do Memory.poke(memAddress -767, 48);
	do Memory.poke(memAddress -735, 48);
	do Memory.poke(memAddress -703, 55);
	do Memory.poke(memAddress -671, 55);
	do Memory.poke(memAddress -639, 50);
	do Memory.poke(memAddress -607, 50);
	do Memory.poke(memAddress -575, 50);
	do Memory.poke(memAddress -543, 48);
	do Memory.poke(memAddress -511, 1008);
	do Memory.poke(memAddress -479, 8159);
	do Memory.poke(memAddress -447, 8143);
	do Memory.poke(memAddress -415, 8128);
	do Memory.poke(memAddress -383, 8135);
	do Memory.poke(memAddress -351, 8071);
	do Memory.poke(memAddress -319, 391);
	do Memory.poke(memAddress -287, 507);
	do Memory.poke(memAddress -255, 1021);
	do Memory.poke(memAddress -223, 2046);
	do Memory.poke(memAddress -191, 4094);
	do Memory.poke(memAddress -159, 4094);
	do Memory.poke(memAddress -127, 4092);
	do Memory.poke(memAddress -95, 4094);
	do Memory.poke(memAddress -63, 2046);
	do Memory.poke(memAddress -31, 1023);
	do Memory.poke(memAddress +1, 2047);
	do Memory.poke(memAddress +33, 4095);
	do Memory.poke(memAddress +65, 4094);
	return;
}

} 
