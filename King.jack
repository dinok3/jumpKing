class King{
    field int maxOffset, maxWidth, maxHeight; //maxWidth is max number of locations
    field int prevX, prevY, prevOffset;
    field int currX, currY, currOffset;
    field int direction, prevDirection;
    field int dx, dy; 
    field int gravity, g, airTime;
    field int hitboxX, hitboxY, hitboxW, hitboxH;
    field boolean landed, changeInLevel;
    field int FPS;


    constructor King new(int x, int y){
        /*
        location = y * 32 + x;
        0 <= x <= 32 
        0 <= y <= 255
        0 <= offset < 8 
        
        Idea with gravity:
        i want to reach max height in 1s => dy should be 0 that is
        dy = -gravity in 1s => dy = 2 and i keep track of airTime counter
        because gravity = (airTime / FPS) * GRAVITY => airTime / FPS = 1 when 
	    airTime = FPS which is in 1s of airTime
        */

        //initialze variables
        let currX = x;
        let currY = y;
        let currOffset = 0;

        //NOTE: currX nije prevX samo u jednom inputu
        let prevX = x;
        let prevY = y;
        let prevOffset = 0;
        
        let dx = 1;
        let dy = -4;
        let gravity = -dy + 1; //airTime = 48 => dy = g
        let g = 0;
        let airTime = 0;

        let prevDirection = 132;
        let direction = 132; //130 - left, 132 - right
        let landed = false;
        let changeInLevel = false;

        let maxOffset = 8;
        let maxHeight = 256;

        do render();

        return this;
    }

    // setters
    method void setX(int x){
        let prevX = currX;
        let currX = Utils.mod(x, maxWidth); 
        return;
    }

    method void setY(int y){
        //Really wierd cases
        let prevY = currY;
        if(y < 30){
            let currY = 256 - (30 - y);
            let changeInLevel = true;
        }
        else{if(y > 255){
            let currY = 30 + (y - 255);
            let changeInLevel = true;
        }else{
            let currY = y;
            let changeInLevel = false;
        }}
        return;
    }

    method void setOffset(int offset){
        let prevOffset = currOffset;
        let currOffset = Utils.mod(offset, maxOffset); 
        return;
    }

    method void setDirection(int key){
        //prevDirection cannot be upward(131)
        //prevDirection is the one holding king's orientation that was
        //before this input
        if(~(direction = 131)){
            let prevDirection = direction;
        }
        let direction = key;
        return;
    }
    
    //getters
    method int getX()       { return currX; }
    method int getY()       { return currY; }
    method int getOffset()  { return currOffset; }
     
    method void refresh(int duration, int FPS){
        //NOTE: tracking inputs: on every refresh, update previous variables
        //      by calling for example setX(currX)
        if(duration > 0){
            //move up
            do moveVertical();
        }else{
            if((~landed)){
                do moveVertical();
            }else{
                do setY(currY);
            }
        }

        if(~(direction = 131)){
            do moveSideways();
        }else{
            do setX(currX);
            do setOffset(currOffset);
        }
        return;
    }

    method void moveVertical(){
        let g = (airTime * gravity) / FPS;
        do setY(currY + dy + g);
        let airTime = airTime + 1;
        return;
    }

    method void moveSideways(){
        do setX(currX);

        if(~(prevDirection = direction)){
            if(~(currOffset = 0)){
                if(direction = 132){
                    do setX(currX - 1); 
                }else{
               
                    do setX(currX + 1);
                }
            }

            //apply symmetry to offset
            do setOffset(((maxOffset) - currOffset) + dx);
        }else{
            do setOffset(currOffset + dx);
        }

        
        if((currOffset = 0)){
            if(direction = 130){
                do setX(currX - 1);
            }else{
                do setX(currX + 1);
            }
        }

        return;
    }


    method void kingRender(){
        var int dir;

        let dir = direction;
        if(dir = 131){  
            let dir = prevDirection;
        }

        if((currOffset = 0) & ~(prevX = currX)){
            if(dir = 132){
                do Graphics.kingRight8(prevX, currY);
            }else{
                do Graphics.kingLeft8(prevX, currY);
            }
        }

        //only 0 offset requires previous position(only X)
        if((currOffset = 0) & (prevX = currX)){
            do Graphics.kingIdle(currX, currY);
        }

        if(currOffset = 1){
            if(dir = 132){
                do Graphics.kingRight1(currX, currY);
            }else{
                do Graphics.kingLeft1(currX, currY);
            }
        }

        if(currOffset = 2){
            if(dir = 132){
                do Graphics.kingRight2(currX, currY);
            }else{
                do Graphics.kingLeft2(currX, currY);
            }
        }

        if(currOffset = 3){
            if(dir = 132){
                do Graphics.kingRight3(currX, currY);
            }else{
                do Graphics.kingLeft3(currX, currY);
            }
        }

        if(currOffset = 4){
            if(dir = 132){
                do Graphics.kingRight4(currX, currY);
            }else{
                do Graphics.kingLeft4(currX, currY);
            }
        }

        if(currOffset = 5){
            if(dir = 132){
                do Graphics.kingRight5(currX, currY);
            }else{
                do Graphics.kingLeft5(currX, currY);
            }
        }

        if(currOffset = 6){
            if(dir = 132){
                do Graphics.kingRight6(currX, currY);
            }else{
                do Graphics.kingLeft6(currX, currY);
            }
        }

        if(currOffset = 7){
            if(dir = 132){
                do Graphics.kingRight7(currX, currY);
            }else{
                do Graphics.kingLeft7(currX, currY);
            }
        }

        return;
    }
    
    
    //erase residue with rectangles
    method void eraseResidue(){
        var int x1,y1,x2,y2;

        do Screen.setColor(0);
        if(~(currX = prevX) & (~(direction = prevDirection)) & (currOffset = 0)){
            //this condition is done only for kingRender!
            //just change prevX instead of adding new variable becasue its at the end of
            //a frame and prevX is not used in calculating next ones
            let prevX = currX;
        }

        if(prevDirection = 132){
            let x1 = prevX * 16 + (prevOffset * 2);
            let x2 = (prevX + 2) * 16 + (prevOffset * 2);
        }else{
            let x1 = (prevX * 16) - (prevOffset * 2); 
            let x2 = (prevX + 2) * 16 - (prevOffset * 2) - 3;
        }
            
        if(~(g = Math.abs(dy))){
            let y1 = currY + 1;
            let y2 = prevY;
            
            //erase head residue
            if(g > Math.abs(dy) & (y1 > 30)){
                //king height: 29px 
                //prevY, currY is for his legs
                //have to be reversed so (x1,y1) is topLeft
                let y1 = prevY - 30;
                let y2 = currY - 30;
            }

            if(changeInLevel){
                let y1 = prevY - 30;
                let y2 = prevY;
            }

            //NOTE: 2 rectangles needed for switching sides
            if(x2 > (511)){
                do Screen.drawRectangle(0, y1, x2 - 511, y2);
            }
            if(x1 < 0){
                do Screen.drawRectangle(511 + x1, y1, 511, y2);
            }

            let x1 = Utils.max(x1, 0);
            let x2 = Utils.min(x2, 511);

            do Screen.drawRectangle(x1,y1,x2,y2);
            
        }
        return;
    }   

    method void render(){
        do kingRender();
        //horizonal residue is erased with next draw function
        if(~(prevY = currY)){
            do eraseResidue();
        }
        return;
    }

    method void computeHitbox(){
        var int dir;
        
        let dir = direction;
        if(direction = 131){
            let dir = prevDirection;
        }
        if(dir = 132){
            let hitboxX = (currX * 16) + (currOffset * 2) + 2;
            let hitboxY = currY - 29;
            let hitboxW = 24;
            let hitboxH = 29;   
        }else{
            let hitboxX = (currX * 16) - (currOffset * 2) + 1;
            let hitboxY = currY - 29;
            let hitboxW = 24;
            let hitboxH = 29;
        }

        return;
    }

    

    method boolean checkForCollisions(Level l, int duration){
        //if they collide return to previous position
        //and alter direction and dy
        var int iter;
        var Platform p;
        var boolean levelChange;
        let levelChange = false;

        do computeHitbox();

        let iter = 0;
        while(iter < l.getSize()){
            let p = l.getPlatform(iter);

            //collision
            if(p.collided(hitboxX, hitboxY, hitboxW, hitboxH))
            {

            if(p.grounded(prevY, changeInLevel)){
                //adjust currY
                let currY = p.getY() - 1;
                let airTime = 0;
                let landed = true;
            }else{
                //current values are incorrect
                let currOffset = prevOffset;
                let currX = prevX;
                
                //prev head position is below platform
                if(p.topBounce(prevY, currY, changeInLevel)){
                    if(changeInLevel){
                        let levelChange = true;
                    }
                    let currY = prevY;
                    //airTime big enough to start falling
                    let airTime = ((-dy + 1) * FPS) / gravity;
                }else{
                    //reverse unless direction is 131
                    do setDirection(130 + (132 - direction));
                    //increases g for 0.5
                    let airTime = airTime + (30 / gravity);
                }

                if(~(direction = 131)){
                    do moveSideways();
                }

                }
            }
                
            let iter = iter + 1;
        } 

        if((duration = 0) & (~landed)){
            let gravity = gravity - dy;
            if(airTime < FPS){
                let airTime = FPS;
            }
            
        }
        return levelChange;
    }

    method Level changeLevel(Map map, Level l){
        do l.clear();
        
        if(currY > 150){
            do map.next();
        }else{
            do map.prev();
        }
        let l = map.getCurrLevel();
        return l;
    }

    method boolean jump(
            int duration, int key, int screenWidth, 
            int fps, Map map
    ){
        var int frameTime;
        var Level l;
        var boolean bounceBack;

        let l = map.getCurrLevel();
        let FPS = fps;
        let frameTime = Utils.round(10000 / FPS);
        let maxWidth = screenWidth;
        let dy = dy * Utils.round((duration)) / 10; 
        do setDirection(key);
        let landed = false;

        while(~landed){
            do refresh(duration, FPS);

            if(changeInLevel){
                let l = changeLevel(map, l);
                
            }
        
            let bounceBack = checkForCollisions(l, duration);

            if(bounceBack){
                let l = changeLevel(map, l);
            }

            do render();    
            
            do l.render();
             
            do setDirection(direction);
            do Sys.wait(frameTime);
        }
        
        if(
            (map.level() = 3) & 
            (currY > 65) &
            (currY < 100) 
        ){
            //he must land on that platform otherwise loop
            //is still on
            return true;
        }

        //reset dy to default
        let dy = -4;
        let gravity = -dy + 1;
        return false; 
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}
