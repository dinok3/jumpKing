class Platform{ 
    field int x, y, w, h;   

    //Platform is just a rectangle
    constructor Platform new(int _x, int _y, int _w, int _h){
        //(x,y) is top left corner

        //check if coords are valid
        if(
            (_x + _w < 512)  & 
            (_w > 0)         &
            (_x > -1)        &
            (_y + _h < 256)  & 
            (_h > 0)         &
            (_y > 39)
        ){
            let x = _x;
            let y = _y;
            let w = _w;
            let h = _h;
        }else{
            do Output.printString("Wrong Platform coords");
        }

        return this;
    }

    //top left corner
    method int getX(){return x;}
    method int getY(){return y;}

    //bottom right corner
    method int getWidth() {return w;}
    method int getHeight(){return h;}

    method void draw(){
        do Screen.setColor(1);
        do Screen.drawRectangle(x, y, x + w, y + h);
        return;
    }

    method void erase(){
        do Screen.setColor(0);
        do Screen.drawRectangle(x ,y , x + w, y + h);
        return;
    }

    method boolean collided(int x2, int y2, int w2, int h2){
        /*
        horizonal checks
            1. no transition between sides
            2. king peeking on the right side
            3. king peeking on the left side
        */

        return (
            (
                ((x < (x2 + w2)) & ((x + w) > x2))
                |
                (((x2 + w2) > 511) & (x < (Utils.mod(x2 + w2, 512))))
                |
                ((x2 < 0) & (Utils.mod(x2, 512) < (x + w)))
            )
            &
            ((y - 1) < (y2 + h2 + 1)) & ((y + h + 1) > y2)
        );
    }

    method boolean grounded(int prevY,boolean levelShift){
        return ((~levelShift) & ((prevY < y) | (prevY = y)));
    }

    method boolean topBounce(int prevY, int currY, boolean levelShift){
        if(~levelShift){
            return (
                ((prevY - 29) > (y + h)) |
                ((prevY - 29) = (y + h))
            );
        }else{
            return (y + h) > (currY - 29);
        }
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}